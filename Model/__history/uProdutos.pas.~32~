unit uProdutos;

interface

uses
  System.JSON, REST.JSON, System.Generics.Collections, FireDAC.Comp.Client, uConexao,
  System.SysUtils;

type
  TProduto = class;

  TProduto = class
  private
    Fean: string;
    Fname: string;
    Fncm: string;
    Fdescription: string;
    Fdescription_small: string;
    Fprice: Double;
    Fcost_price: Double;
    Fpromotional_price: Double;
    Fstart_promotion: string;
    Fend_promotion: string;
    Fbrand: string;
    Fmodel: string;
    Fweight: Double;
    Flength: String;
    Fwidth: String;
    Fheight: String;
    Fstock: Double;
    Fcategory_id: string;
    Favailable: Integer;
    Favailability: string;
    Favailability_days: Integer;
    Freference: string;
    Frelated_categories: Double;
    Frelease_date: string;
    Fshortcut: string;
    Fvirtual_product: Integer;

  public
    destructor Destroy; override;

    property CodigoBarras: string read Fean write Fean; // "9999";
    property Descricao: string read Fname write Fname; // "Produto Teste API";
    property NCM: string read Fncm write Fncm; // "99999999"
    property DescricaoLonga: string read Fdescription write Fdescription; // "Descrição do Produto de Teste da API";
    property DescricaoCurta: string read Fdescription_small write Fdescription_small; // "Produto de Teste da API";
    property Preco: Double read Fprice write Fprice; // 10.01;
    property Custo: Double read Fcost_price write Fcost_price; // 10.01;
    property PrecoPromocao: Double read Fpromotional_price write Fpromotional_price; // 10.01;
    property InicioPromocao: string read Fstart_promotion write Fstart_promotion; // "2019-04-01";
    property FimPromocao: string read Fend_promotion write Fend_promotion; // "2019-04-30";
    property Marca: string read Fbrand write Fbrand; // "Marca";
    property Modelo: string read Fmodel write Fmodel; // "Modelo";
    property Peso: Double read Fweight write Fweight; // 1000;
    property Comprimento: String read Flength write Flength; // 10;
    property Largura: String read Fwidth write Fwidth; // 10;
    property Altura: String read Fheight write Fheight; // 10;
    property Estoque: Double read Fstock write Fstock; // 100;
    property CategoriaID: string read Fcategory_id write Fcategory_id; // "2";  // Cod categoria principal do produto
    property ProdutoDisponivel: Integer read Favailable write Favailable; // 1;  0 = indisponivel // 1 = disponivel
    property Disponibilidade: string read Favailability write Favailability; // "Disponível em 3 dias";
    property DisponibilidadeDias: Integer read Favailability_days write Favailability_days; // 3;
    property SKU: string read Freference write Freference; // "111";
    property CategoriasAdicionais: Double read Frelated_categories write Frelated_categories; // [3,5,7];
    property DataLancamento: string read Frelease_date write Frelease_date; // "";
    property Atalho: string read Fshortcut write Fshortcut; // "";
    property ProdutoVirtual: Integer read Fvirtual_product write Fvirtual_product; // "0";  0 = Normal // 1 = virtual

    constructor Create;

    function ToJson: TJSONObject;
  end;

implementation

function TProduto.ToJson: TJSONObject;
begin
  result := TJson.ObjectToJsonObject(self, [joIgnoreEmptyStrings]);
end;

constructor TProduto.Create;
begin
  Favailable := 1;
  Fvirtual_product := 0;
end;

destructor TProduto.Destroy;
begin
end;

end.
